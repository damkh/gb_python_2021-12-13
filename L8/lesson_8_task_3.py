"""
3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список
только числами. Класс-исключение должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит
работу скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список с числами
выводится на экран.
Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и
отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.
"""


class NotANumberError(Exception):
    def __init__(self, message):
        self.message = message


my_list = []
while True:
    try:
        a_num = input('Введите число или слово stop для завершения: ')
        if a_num.isdigit():
            my_list.append(float(a_num))
            print(f'Число {a_num} добавлено')
        elif a_num == 'stop':
            break
        else:
            try:
                float(a_num)
            except Exception as e:
                raise NotANumberError('Это не число')
            else:
                my_list.append(float(a_num))
    except NotANumberError as e:
        print(e)

print(my_list)
